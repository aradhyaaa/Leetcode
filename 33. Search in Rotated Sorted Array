class Solution {
public:
    int search(std::vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2; // Avoid potential overflow by using this form of calculating mid.

            if (nums[mid] == target) {
                return mid; // Target found, return the index.
            }

            if (nums[low] <= nums[mid]) { // Left segment is sorted
                if (nums[low] <= target && target < nums[mid]) {
                    high = mid - 1; // Target might be in the left segment
                } else {
                    low = mid + 1; // Search in the right segment
                }
            } else { // Right segment is sorted
                if (nums[mid] < target && target <= nums[high]) {
                    low = mid + 1; // Target might be in the right segment
                } else {
                    high = mid - 1; // Search in the left segment
                }
            }
        }

        return -1; // Target not found in the array
    }
};
