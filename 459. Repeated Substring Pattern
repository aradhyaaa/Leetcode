class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int n = s.length(); // Get the length of the input string
        
        // Iterate through possible substring lengths from 1 to n/2
        for (int i = 1; i <= n / 2; ++i) {
            if (n % i == 0) { // Check if the length of s is divisible by i
                string substring = s.substr(0, i); // Get the potential substring
                string repeated = "";
                
                // Repeat the potential substring n/i times to form a candidate
                for (int j = 0; j < n / i; ++j) {
                    repeated += substring;
                }
                
                // If the repeated string matches the original string s, return true
                if (repeated == s) return true;
            }
        }
        
        return false; // If no repeated substring is found, return false
    }
};
