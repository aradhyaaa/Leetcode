class Solution {
public:
    vector<int> dp;

    bool solve(int i, string s, vector<string>& wordDict) {
        if (i < 0) {
            return true; // If we have successfully segmented the entire string, return true.
        }
        if (dp[i] != -1) {
            return dp[i] == 1; // If the result is already computed, return it.
        }

        for (string& w : wordDict) {
            int sz = w.size();
            if (i - sz + 1 < 0) {
                continue; // Skip words that are too long for the remaining string.
            }
            if (s.rfind(w, i - sz + 1) == i - sz + 1 && solve(i - sz, s, wordDict)) {
                dp[i] = 1;
                return true; // If a valid word is found and the rest of the string can be segmented, return true.
            }
        }

        dp[i] = 0; // If no valid segmentation is found, mark as not possible.
        return false;
    }

    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.size();
        dp.assign(n, -1); // Initialize the DP array to -1 (uncomputed).

        // Start the recursive segmentation from the end of the string.
        return solve(n - 1, s, wordDict);
    }
};
